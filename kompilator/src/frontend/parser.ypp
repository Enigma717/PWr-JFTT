/*
    Autor:      Marek Traczyński (261748)
    Kurs:       Języki Formalne i Techniki Translacji
    Projekt:    Kompilator
    Opis pliku: Parser
*/


%{
    #include <iostream>
    #include <string>

    #include "../arithmetic.cpp"


    using std::cout;


    extern int yylineno;
    extern FILE* yyin;

    extern int yylex();
    extern int yyparse();
    extern void yyerror(std::string s);
%}


%union {
    int             token;
    long long int   lli;
    std::string     *string;
}


// Tokeny słów kluczowych
%token <token> T_PROCEDURE T_PROGRAM T_IS T_VAR T_BEGIN T_END
%token <token> T_IF T_THEN T_ELSE T_ENDIF
%token <token> T_WHILE T_DO T_ENDWHILE
%token <token> T_REPEAT T_UNTIL
%token <token> T_READ T_WRITE

// Tokeny znaków specjalnych
%token <token> T_LPAR T_RPAR
%token <token> T_ASSIGN T_COMMA T_SEMICOLON

// Tokeny znaków arytmetycznych
%token <token> T_ADD T_SUB T_MUL T_DIV T_MOD

// Tokeny znaków logicznych
%token <token> T_EQ T_NE T_GT T_LT T_GE T_LE

// Tokeny nieterminala value
%token <string> T_IDENTIFIER
%token <lli> T_NUM

// Token błędu
%token <token> T_ERROR


%type <lli> value expression


%%

program_all:
    procedures main
    ;

procedures:
    procedures T_PROCEDURE proc_head T_IS T_VAR declarations T_BEGIN commands T_END
    | procedures T_PROCEDURE proc_head T_IS T_BEGIN commands T_END
    |
    ;

main:
    T_PROGRAM T_IS T_VAR declarations T_BEGIN commands T_END
    | T_PROGRAM T_IS T_BEGIN commands T_END
    ;

commands:
    commands command
    | command
    ;

command:
    T_IDENTIFIER T_ASSIGN expression T_SEMICOLON
    | T_IF condition T_THEN commands T_ELSE commands T_ENDIF
    | T_IF condition T_THEN commands T_ENDIF
    | T_WHILE condition T_DO commands T_ENDWHILE
    | T_REPEAT commands T_UNTIL condition T_SEMICOLON
    | proc_head T_SEMICOLON
    | T_READ T_IDENTIFIER T_SEMICOLON
    | T_WRITE value T_SEMICOLON
    ;

proc_head:
    T_IDENTIFIER T_LPAR declarations T_RPAR
    ;

declarations:
    declarations T_COMMA T_IDENTIFIER
    | T_IDENTIFIER
    ;

expression:
    value
    | value T_ADD value             // { $$ = COM_add($1, $3); }
    | value T_SUB value             // { $$ = COM_sub($1, $3); }
    | value T_MUL value             // { $$ = COM_mul($1, $3); }
    | value T_DIV value             // { $$ = COM_div($1, $3); }
    | value T_MOD value             // { $$ = COM_mod($1, $3); }
    ;

condition:
    value T_EQ value
    | value T_NE value
    | value T_GT value
    | value T_LT value
    | value T_GE value
    | value T_LE value
    ;

value:
    T_NUM                           { $$ = $1; }
    | T_IDENTIFIER                  
    ;


%%

void yyerror(std::string s)
{
    std::cerr << "\n\nLinia nr " << yylineno << ": " << s << "\n";
}



void run_parser(FILE *file)
{
    cout << "Starting parsing...\n\n";

    yyin = file;

    yyparse();

    cout << "\n";
}