/*
    Autor:      Marek Traczyński (261748)
    Kurs:       Języki Formalne i Techniki Translacji
    Projekt:    Kompilator
    Opis pliku: Parser
*/

%code requires { 
    #include "../astree.h"
    #include <vector>
    
    extern void yyerror(vector<SymTabNode> &symbolTable, ASTree &programTree, string s);
}

%code provides {
    #define YY_DECL \
        int yylex(vector<SymTabNode> &symbolTable, ASTree &programTree)
    YY_DECL;
}

%{
    #include <iostream>
    #include <vector>
    
    #include "../astree.cpp"
    #include "../symtab.h"

    using std::vector;

    extern int yylineno;
    extern FILE* yyin;

    const string kColorReset = "\033[0m";
    const string kColorRed   = "\033[31m";
    const string kColorGreen = "\033[32m";

    int argCount = 0;
%}


%lex-param {vector<SymTabNode> &symbolTable} {ASTree &programTree}
%parse-param {vector<SymTabNode> &symbolTable} {ASTree &programTree}

%union {
    int                     token;
    int                     tab_index;
    ASTree                  *astree;
}


// Tokeny słów kluczowych
%token <token> T_PROCEDURE T_PROGRAM T_IS T_VAR T_BEGIN T_PROCCALL T_END
%token <token> T_IF T_THEN T_ELSE T_ENDIF
%token <token> T_WHILE T_DO T_ENDWHILE
%token <token> T_REPEAT T_UNTIL
%token <token> T_READ T_WRITE

// Tokeny znaków specjalnych
%token <token> T_LPAR T_RPAR
%token <token> T_ASSIGN T_COMMA T_SEMICOLON

// Tokeny znaków arytmetycznych
%token <token> T_ADD T_SUB T_MUL T_DIV T_MOD

// Tokeny znaków logicznych
%token <token> T_EQ T_NE T_GT T_LT T_GE T_LE

// Tokeny nieterminala value
%token <tab_index> T_IDENTIFIER T_NUM

// Token błędu
%token <token> T_ERROR

// Typy rozgałęzienia drzewa składniowego
%type <astree> procedures main
%type <astree> proc_call proc_head declarations head_declarations
%type <astree> commands command 
%type <astree> condition expression value 


%%

program_all:
    procedures main     { programTree = startProgram($1, $2); }
    ;

procedures:
    procedures T_PROCEDURE proc_head T_IS T_VAR declarations T_BEGIN commands T_END     { $$ = addProcedure($1, $3, $6, $8); }
    | procedures T_PROCEDURE proc_head T_IS T_BEGIN commands T_END                      { $$ = addProcedure($1, $3, $6); }
    |                                                                                   { $$ = newTreeBranch(ASTree::kProcedures); }
    ;

main:
    T_PROGRAM T_IS T_VAR declarations T_BEGIN commands T_END    { $$ = newTreeBranch(ASTree::kMain, $4, $6); }
    | T_PROGRAM T_IS T_BEGIN commands T_END                     { $$ = newTreeBranch(ASTree::kMain, $4); }
    ;

commands:
    commands command                                            { $$ = addCommand($1, $2); }
    | command                                                   { $$ = newTreeBranch(ASTree::kCommands, $1); }
    ;

command:
    T_IDENTIFIER T_ASSIGN expression T_SEMICOLON                    { 
                                                                        /* do usunięcia */
                                                                        // if (!(($3->mTreeBranches).empty()))
                                                                        // {
                                                                        //     ASTree *treeBranch1 = $3->mTreeBranches[0];
                                                                        //     ASTree *treeBranch2 = $3->mTreeBranches[1];

                                                                        //     switch($3->mTreeType) {
                                                                        //         case ASTree::kAddition:
                                                                        //             symbolTable[$1].mNodeValue = symbolTable[treeBranch1->mTreeMemoryIndex].mNodeValue + 
                                                                        //                                         symbolTable[treeBranch2->mTreeMemoryIndex].mNodeValue;
                                                                        //             break;
                                                                        //         case ASTree::kSubtraction:
                                                                        //             symbolTable[$1].mNodeValue = symbolTable[treeBranch1->mTreeMemoryIndex].mNodeValue - 
                                                                        //                                         symbolTable[treeBranch2->mTreeMemoryIndex].mNodeValue;
                                                                        //             break;
                                                                        //         case ASTree::kMultiplication:
                                                                        //             symbolTable[$1].mNodeValue = symbolTable[treeBranch1->mTreeMemoryIndex].mNodeValue * 
                                                                        //                                         symbolTable[treeBranch2->mTreeMemoryIndex].mNodeValue;
                                                                        //             break;
                                                                        //         case ASTree::kDivision:
                                                                        //             symbolTable[$1].mNodeValue = symbolTable[treeBranch1->mTreeMemoryIndex].mNodeValue / 
                                                                        //                                         symbolTable[treeBranch2->mTreeMemoryIndex].mNodeValue;
                                                                        //             break;
                                                                        //     }
                                                                        // }
                                                                        // else
                                                                        // {
                                                                        //     symbolTable[$1].mNodeValue = symbolTable[$3->mTreeMemoryIndex].mNodeValue;
                                                                        // }
                                                                        /* do usunięcia */

                                                                        symbolTable[$1].mNodeIsInitialized = true;
                                                                        ASTree *variable = newTreeValue(ASTree::kIdentifier, $1); 
                                                                        $$ = newTreeBranch(ASTree::kAssign, variable, $3);
                                                                    }
    | T_IF condition T_THEN commands T_ELSE commands T_ENDIF        { $$ = newTreeBranch(ASTree::kIfElseCond, $2, $4, $6); }
    | T_IF condition T_THEN commands T_ENDIF                        { $$ = newTreeBranch(ASTree::kIfCond, $2, $4); }
    | T_WHILE condition T_DO commands T_ENDWHILE                    { $$ = newTreeBranch(ASTree::kWhileLoop, $2, $4); }
    | T_REPEAT commands T_UNTIL condition T_SEMICOLON               { $$ = newTreeBranch(ASTree::kRepeatLoop, $4, $2); }
    | proc_call T_SEMICOLON                                         { $$ = newTreeBranch(ASTree::kCall, $1); }
    | T_READ T_IDENTIFIER T_SEMICOLON                               { 
                                                                        symbolTable[$2].mNodeIsInitialized = true;
                                                                        ASTree *variable = newTreeValue(ASTree::kIdentifier, $2); 
                                                                        $$ = newTreeBranch(ASTree::kRead, variable);
                                                                    }
    | T_WRITE value T_SEMICOLON                                     { $$ = newTreeBranch(ASTree::kWrite, $2); }
    ;

proc_call:
    T_PROCCALL declarations T_RPAR              {
                                                    if (argCount != symbolTable[$1].mNodeParamCount) 
                                                    { 
                                                        string errorMsg = "Nieprawidłowa liczba argumentów dla procedury \'" + symbolTable[$1].mNodeIdentifier + "\'";
                                                        yyerror(symbolTable, programTree, errorMsg);
                                                    }

                                                    ASTree *procId = newTreeValue(ASTree::kIdentifier, $1); 
                                                    $$ = newTreeBranch(ASTree::kCallProcedure, procId, $2);
                                                }
    ;

proc_head:
    T_IDENTIFIER T_LPAR head_declarations T_RPAR    { 
                                                        ASTree *procId = newTreeValue(ASTree::kIdentifier, $1); 
                                                        $$ = newTreeBranch(ASTree::kNewProcedure, procId, $3);
                                                    }
    ;

declarations:
    declarations T_COMMA T_IDENTIFIER           { 
                                                    argCount++; 

                                                    ASTree *variable = newTreeValue(ASTree::kIdentifier, $3); 
                                                    $$ = addDeclaration($1, variable);
                                                }
    | T_IDENTIFIER                              { 
                                                    argCount++; 

                                                    ASTree *variable = newTreeValue(ASTree::kIdentifier, $1); 
                                                    $$ = newTreeBranch(ASTree::kDeclarations, variable);
                                                }
    ;

head_declarations:
    head_declarations T_COMMA T_IDENTIFIER          { 
                                                        symbolTable[$3].mNodeIsInitialized = true;
                                                        ASTree *variable = newTreeValue(ASTree::kIdentifier, $3); 
                                                        $$ = addDeclaration($1, variable);
                                                    }
    | T_IDENTIFIER                                  { 
                                                        symbolTable[$1].mNodeIsInitialized = true;
                                                        ASTree *variable = newTreeValue(ASTree::kIdentifier, $1); 
                                                        $$ = newTreeBranch(ASTree::kParameters, variable);
                                                    }
    ;

expression:
    value                           { $$ = $1; }
    | value T_ADD value             { $$ = newTreeBranch(ASTree::kAddition, $1, $3); }
    | value T_SUB value             { $$ = newTreeBranch(ASTree::kSubtraction, $1, $3);  }
    | value T_MUL value             { $$ = newTreeBranch(ASTree::kMultiplication, $1, $3);  }
    | value T_DIV value             { $$ = newTreeBranch(ASTree::kDivision, $1, $3);  }
    | value T_MOD value             { $$ = newTreeBranch(ASTree::kModulo, $1, $3);  }
    ;

condition:
    value T_EQ value                { $$ = newTreeBranch(ASTree::kEqual, $1, $3); }
    | value T_NE value              { $$ = newTreeBranch(ASTree::kNotEqual, $1, $3); }
    | value T_GT value              { $$ = newTreeBranch(ASTree::kGreater, $1, $3); }
    | value T_LT value              { $$ = newTreeBranch(ASTree::kLess, $1, $3); }
    | value T_GE value              { $$ = newTreeBranch(ASTree::kGreaterEqual, $1, $3); }
    | value T_LE value              { $$ = newTreeBranch(ASTree::kLessEqual, $1, $3); }
    ;

value:
    T_NUM                           { $$ = newTreeValue(ASTree::kNumber, $1); }
    | T_IDENTIFIER                  {
                                        if (symbolTable[$1].mNodeIsInitialized == false) 
                                        { 
                                            string errorMsg = "Użycie niezadeklarowanej/niezainicjalizowanej zmiennej \'" + symbolTable[$1].mNodeIdentifier + "\'";
                                            yyerror(symbolTable, programTree, errorMsg);
                                        } 
                                        $$ = newTreeValue(ASTree::kIdentifier, $1); 
                                    }
    ;


%%


void yyerror(vector<SymTabNode> &symbolTable, ASTree &programTree, string s)
{
    std::cerr << kColorRed << "\n\t[ERROR] Linia nr " << yylineno << ": " << kColorGreen << s << kColorReset << "\n";
    exit(1);
}


void run_parser(FILE *file, vector<SymTabNode> &symbolTable, ASTree &programTree)
{
    std::cout << "Starting parsing...\n\n";

    yyin = file;

    yyparse(symbolTable, programTree);

    std::cout << "\n";
}