%{
    #include <iostream>
    #include <string>

    #include "arithmetic.cpp"

    using std::cout, std::string;

    extern int yylineno;
    extern FILE* yyin;

    extern int yylex();
    extern int yyparse();
    extern void yyerror(string s);
%}



%token T_PROCEDURE
%token T_PROGRAM
%token T_IS
%token T_VAR
%token T_BEGIN
%token T_END
%token T_IF
%token T_THEN
%token T_ELSE
%token T_ENDIF
%token T_WHILE
%token T_DO
%token T_ENDWHILE
%token T_REPEAT
%token T_UNTIL
%token T_READ
%token T_WRITE

%token T_EQ
%token T_NE
%token T_GT
%token T_LT
%token T_GE
%token T_LE

%token T_ADD
%token T_SUB
%token T_MUL
%token T_DIV
%token T_MOD
%token T_LPAR
%token T_RPAR

%token T_IDENTIFIER
%token T_NUM

%token T_ASSIGN
%token T_COMMA
%token T_SEMICOLON
%token T_COLON

%token T_ERROR


%%

program_all:
    procedures main
    ;

procedures:
    procedures T_PROCEDURE proc_head T_IS T_VAR declarations T_BEGIN commands T_END
    | procedures T_PROCEDURE proc_head T_IS T_BEGIN commands T_END
    |
    ;

main:
    T_PROGRAM T_IS T_VAR declarations T_BEGIN commands T_END
    | T_PROGRAM T_IS T_BEGIN commands T_END
    ;

commands:
    commands command
    | command
    ;

command:
    T_IDENTIFIER T_ASSIGN expression T_SEMICOLON
    | T_IF condition T_THEN commands T_ELSE commands T_ENDIF
    | T_IF condition T_THEN commands T_ENDIF
    | T_WHILE condition T_DO commands T_ENDWHILE
    | T_REPEAT commands T_UNTIL condition T_SEMICOLON
    | proc_head T_SEMICOLON
    | T_READ T_IDENTIFIER T_SEMICOLON
    | T_WRITE T_NUM T_SEMICOLON
    | expression T_SEMICOLON                        // Do usuniÄ™cia
    ;

proc_head:
    T_IDENTIFIER T_LPAR declarations T_RPAR
    ;

declarations:
    declarations T_COMMA T_IDENTIFIER
    | T_IDENTIFIER
    ;

expression:
    value
    | value T_ADD value             { $$ = COM_add($1, $3); }
    | value T_SUB value             { $$ = COM_sub($1, $3); }
    | value T_MUL value             { $$ = COM_mul($1, $3); }
    | value T_DIV value             { $$ = COM_div($1, $3); }
    | value T_MOD value             { $$ = COM_mod($1, $3); }
    ;

condition:
    value T_EQ value
    | value T_NE value
    | value T_GT value
    | value T_LT value
    | value T_GE value
    | value T_LE value
    ;

value:
    T_NUM                           { $$ = $1; }
    | T_IDENTIFIER
    | T_ERROR
    ;


%%

void yyerror(std::string s)
{
    std::cerr << "\n\nLinia nr " << yylineno << ": " << s << "\n";
}



void run_parser(FILE *file)
{
    cout << "Starting parsing...\n\n";

    yyin = file;

    yyparse();

    cout << "\n";
}